
docStart("MML_Delay", "Using Delay Lines in MML");
model("func", "Variable Function (VF) Delay Lines", 
    "vf1.mod"); 
    "vf2.mod"); 
model("pde", "PDE Delay Lines", 
model("ode", "ODE Series Delay Lines", 
docStop();

docStart("MML_Events", "Events in MML");
model("state", "State variables and a simple example", 
    "count.mod"); 
model("gate1", "Gate Example 1", 
    "gate1.mod"); 
model("gate2", "Gate example 2", 
    "gate2.mod"); 
model("gate3", "Gate example 3", 
    "gate3.mod"); 
model("ode", "Pseudo-discontinuities in ODE variables", 
    "odedrop.mod"); 
model("recursive", "Recursive functions", 
    "fibonacci.mod"); 
model("details", "Some details and cautions", 
docStop();

docStart("MML_Func_C", "Calling C Code From MML");
model("example1", "Example 1", 
    "cmean.mod"); 
model("example2", "Example 2", 
    "cintegral.mod"); 
model("example3", "Example 3", 
    "creverse.mod"); 
model("example4", "Example 4", 
    "nmean.mod"); 
    "mylib.c"); 
model("example5", "Example 5", 
    "ncombo.mod"); 
    "newlib.c"); 
docStop();

docStart("MML_Func_Intro", "Using Functions and Procedures in MML");
model("fp", "Multiprocessing F&P", 
    "reentrant.mod"); 
docStop();

docStart("MML_Func_Java", "Calling Java Code From MML");
model("example1", "Example 1", 
    "jmean.mod"); 
model("example2", "Example 2", 
    "jintegral.mod"); 
model("example3", "Example 3", 
    "jreverse.mod"); 
docStop();

docStart("MML_Func_Matlab", "Calling Matlab Code from MML");
model("start", "Getting Started", 
model("command", "Calling Matlab via the command line", 
model("example_jdet", "Example: Determinant calculated via Java 
    "jdet.mod"); 
model("example_jinv", "Example: Matrix inversion calculated via Java 
    "jinv.mod"); 
model("example_react4", "Example: 4 solute reaction network", " steady 
    "react4matlab.proj"); 
    "react4.proj"); 
model("api", "Calling Matlab via an API", 
model("future", "Future plans", 
docStop();

docStart("MML_Implicit", "Implicit Equations in MML");
model("linear1", "Linear Implicit Equations in One Variable", 
    "implicit1.mod"); 
model("linearM", "Linear Implicit Equations of Multiple Variables", 
    "implicit2.mod"); 
model("ode", "Linear Implicit Equations in ODEs", 
    "implicit3.mod"); 
    "implicit4.mod"); 
model("nonlinear", "Non-linear Implicit Equations", 
model("bound", "Bounded and Unbounded Non-Linear Implicit Equations", 
    "implicit5.mod"); 
model("approx", "The Approximately-Equals Relation", 
model("controls", "Non-Linear Solver Run-Time Controls", 
model("mult", "Non-linear Implicit Equations in Multiple Variables", 
    "implicit6.mod"); 
model("limit", "Limitations", 
docStop();

docStart("MML_Integrals", "Using Integrals and Sums in MML");
model("integrals", "Integrals", 
    "integral1.mod"); 
    "integral2.mod"); 
model("sums", "Sums", 
    "sum1.mod"); 
    "sum2.mod"); 
model("legacy", "Legacy Support", 
    "legacy.mod"); 
model("limits", "Limitations", 
docStop();

docStart("MML_Intro", "Introductory Survey of MML");
model("simple", "A Simple MML Model ", 
    "intro_alg.mod"); 
model("ode", "Ordinary Differential Equations (ODEs)</a> </h2>
    "intro_ode.mod"); 
model("units", "Physical Units</a> </h2>
    "intro_unit.mod"); 
model("extern", " Driving Data and Test Signals </a> </h2>
    "intro_extern.mod"); 
model("parms", " Parameters and Parameter Sets </a> </h2>
model("constraints", " Understanding Constraints </a> </h2>
    "intro_const.mod"); 
model("topics", " Further Topics </a> </h2>
model("", " </a> </h2>
docStop();

docStart("MML_Matlab", "Connecting JSim and Matlab");
model("basics", "The Basics", 
model("extern_master", "External master", " JSim and Matlab 
    "example1.sh"); 
    "gene1.mod"); 
    "gene2.m"); 
model("jsim_master", "JSim master", " Matlab slave", 
model("matlab_master", "Matlab Master", " JSim slave", 
    "monte1.m"); 
    "monte1.proj"); 
docStop();

docStart("MML_MFAX_Intro", "Introduction to the MFAX BCL");
model("simple", "Simple example", 
    "mfax01.mod"); 
model("units", "Using physical units", 
    "mfax02.mod"); 
model("mml", "Incorporating MML into BCL models", 
model("conc", "Setting concentrations", 
    "mfax03.mod"); 
    "mfax04.mod"); 
    "mfax05.mod"); 
model("more", "More Component Types", 
model("reac", "Reaction Types", 
    "mfax06.mod"); 
    "mfax07.mod"); 
model("cons", "Consumption and Production", 
    "mfax09.mod"); 
model("mem", "Membrane and Transport", 
    "mfax10.mod"); 
    "mfax10f.mod"); 
model("flow", "Convective Flow", 
    "mfax11.mod"); 
model("branch", "Branching Flows", 
    "mfax12.mod"); 
model("recirc", "Recirculating Flow", 
    "mfax13.mod"); 
model("inject", "Injections", 
    "mfax14.mod"); 
    "mfax15.mod"); 
model("private", "Privatizing sub-variables", 
    "mfax16.mod"); 
docStop();

docStart("MML_ODE", "Using ODEs in MML");
model("first", "First example", 
    "ode1.mod"); 
model("system", "Systems of ODEs", 
    "ode_comp3.mod"); 
model("order", "Second order equations", 
    "ode_order2.mod"); 
model("implicit", "Using implicit equations with ODEs", 
    "ode_implicit.mod"); 
model("parallel", "Parameterized parallel systems", 
    "ode_parallel.mod"); 
model("series", "Parameterized serial system", 
    "ode_serial.mod"); 
model("events", "Using events with ODEs", 
docStop();

docStart("MML_PDE_85", "Using Partial-Differential Equations in MML");
model("first", "First Example", 
    "pde1.mod"); 
model("mult", "Multiple Variable Problems", 
    "pde2.mod"); 
model("icbc", "IC/BC Consistency in PDEs", 
    "icbc1.mod"); 
    "icbc2.mod"); 
    "icbc3.mod"); 
model("form", "General Form", 
model("avail", "Available PDE Solvers", 
model("lsfea", "The LSFEA Solver", 
model("mccor", "The MacCormack Solver", 
model("toms731", "The Toms731 Solver", 
model("toms690", "The Toms690 Solver", 
docStop();

docStart("MML_PDE", "Using Partial-Differential Equations in MML");
model("first", "First Examples", 
model("adv", "Example 1: The Advection Equation", 
    "Advection.proj"); 
model("diff", "Example 2: The Diffusion Equation", 
    "Diffusion.proj"); 
model("advdiff", "Example 3: The Combined Advection/Diffusion 
    "AdvectionDiffusion.proj"); 
model("mult", "Example 4: A Multiple Variable Problem", 
    "CounterCurrent.proj"); 
model("bc", "Types of Boundary Conditions for advection diffusion 
model("dirichlet", "Dirichlet:</a> C (at either x.min or x.max) = 
model("neumann", "Neumann:</a> C:x (at either x.min or x.max) = 0", " 
model("flux", "Total Flux:</a> -U*C + D*C:x = -U*Cin (at either 
model("avail", "Available PDE Solvers", 
model("lsfea", "The LSFEA Solver", 
model("maccormack", "The MacCormack Solver", 
model("toms731", "The Toms731 Solver", 
docStop();

docStart("MML_Templates", "Using Templates in MML");
model("flat", "Understanding components and
    "expdecay.mod"); 
model("mfax", "Understanding the MFAX and XSIM template packages", 
    "template1.mod"); 
model("templ", "Template Declarations", 
model("class", "Class Templates", 
model("mml", "MML Templates", 
    "template2.mod"); 
    "template3.mod"); 
model("limits", "Limitations of MML Templates", 
docStop();

docStart("MML_Topics", "Miscellaneous Short Topics in MML");
model("public", "Public", " Private and Extern variables", 
    "inverter.mod"); 
    "rabbit.mod"); 
    "startzero.mod"); 
model("choice", "Choice variables", 
model("deriv", "Symbolic Derivatives", 
    "deriv1.mod"); 
    "deriv3.mod"); 
model("help", "Variable Properties", 
    "prop1.mod"); 
    "prop2.mod"); 
docStop();

docStart("MML_Units", "Using Physical Units in MML");
model("phys", "Physical Units", 
examples with units</a, "</h2>
    "units1.mod"); 
    "units2.mod"); 
model("more", "More About Units", 
    "units4.mod"); 
model("def", "Defining Additional Units", 
    "units3.mod"); 
docStop();

docStart("MML_VarFunc", "Using Variable Functions in MML");
model("basics", "VF Basics", 
    "vfb1.mod") 
    "vfb2.mod") 
model("summary", "Quick Summary of VF Basics", 
model("delay", "Creating Delay Lines using VFs", 
model("interp", "Importing External Data using VFs", 
    "vfrc1.mod"); 
    "vfrc3.mod"); 
    "vfrc3.proj"); 
model("bc", "VFs and PDE Boundaries", 
    "vfbc1.mod"); 
    "vfbc2.mod"); 
docStop();

docStart("User_Fgen", "Using Function Generators in JSim");
model("simple", "  Simple Example", 
    "fgen1.mod"); 
model("basic", " Basic Usage", 
model("advanced", " Advanced Usage ", 
docStop();

docStart("User_Fgen", "Function generators available under JSim");
model("pulses", "  Pulses and Wave Trains</a>:</h2>
model("pulse1", "Pulse 1", 
model("pulse2", "Pulse 2", 
model("pulse3", "Pulse 3", 
model("extended", "Extended Pulse 3", 
model("ramp", "Ramp", 
model("square", "Square Wave Train", 
model("sawtooth", "Sawtooth Wave Train", 
model("sine", "Sine Wave Train", 
model("common", "Common Parameters for PDF's", 
model("expon", "Exponential", 
model("gauss", "Gaussian", 
model("lagnormal", "LagNormal", 
model("longtail", "Longtail", 
model("gamma", "GammaVar", 
model("poisson", "Poisson", 
model("random", "Random Walk", 
model("data", "Data Curve", 
docStop();

docStart("User_Fpack.html", "The JSim Fortran Package");
model("avail", "Available models", 
model("use", "Using the fpack models", 
examples/fpack directory of your JSim distribution.  The models are
model("caveat", "Some caveats", 
docStop();

docStart("User_Intro", "Introduction to the JSim GUI");
model("start", "Starting JSim and loading an example model", 
    "intro1.mod')  to your computer. This
    "intro1.mod") . You may be asked to OK a 
model("gui", "The JSim GUI ", 
model("compile", "Compiling the model", 
model("runtime", "Running the model", 
model("plot", "Plotting Model Data", 
model("save", "Saving your work", 
    "p, "
model("next", "Where to next?", 
docStop();

docStart("User_Optim", "Introduction to the JSim Optimizers");
model("over", "Overview", 
model("start", "Starting the tutorial", 
    "opt1.mod") ", " the model file for this
    "optdata1.tac") ", " the data file for this
    "li, "
model("model", "Understanding the model", 
model("setup1", "A Sample Optimization",  
model("graph", "Graphs and Reports",  
model("stop", "Stopping Criteria",  
model("complex", "Complications", 
docStop();

docStart("User_Sens", "Introduction to JSim Sensitivity Analysis");
    "sens1.mod"); 
docStop();
